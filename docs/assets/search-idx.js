export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Hi üëã I'm David Schach A Salesforce Architect I've been working on Salesforce since the Summer 06  release(142, API 7.0)(Yes, that's a long time!) üíº To see a long list of things I've done, check out my online portfolio UP NEXT Any ideas? I'm thinking of adding custom metadata to the trigger framework, but there are so many of those around. Maybe I will focus on code highlighting and find a way to get it into Wordpress LATEST NEWS I revised and released ACTION PLANS version 4  from Salesforce Labs! Find it on the AppExchange üìã I rewrote large chunks of Surveyforce  - check it out! I just released an Apex highlighter  plugin for highlight.js  so any Apex on a webpage will look great - and I published it to npm ! CURRENTLY üî≠ I‚Äôm working on some  Salesforce code projects: Trigger Framework RecordTypes utility class Duplicate Record Handling üå± I‚Äôm learning GitHub actions and how to make cool things happen automatically when submitting pull requests, etc. ACHIEVEMENTS :us: Original designer of Salesforce implementation for the Obama reelection campaign :cloud: Creator of Chatter BINGO  at Dreamforce 2010, the only community member to have an app included in the Dreamforce app Has surfaced a dwarf error message in Salesforce - if you know what that is, then you know what that means Founder of the Dreamforce Tweetup, the first and largest community-led user event at Dreamforce :swimmer: :bicyclist: :runner: Ironman finisher, Ironman Arizona 2021 BIO üòÑ Pronouns: he/him üë®‚Äçüíª All my GitHub projects are available at https://github.com/dschach üìù I should blog more at X-Squared on Demand üìÑ Here's my professional experience: LinkedIn üí¨ Ask me about apprenticeships and equity in the tech industry. Let's jam about Salesforce, Apex, and Security on the Salesforce Platform üì´ How to reach me: Find me via LinkedIn, Twitter, or some other site ! ‚ö° Fun fact: I was born in South Africa CONTACT Top Languages GitHub Stats X-Squared on Demand Duplicate Record Item Enrichment and Auto-Deletion Code Lightning Component With Running User Information ChatterBINGO is Now Open-Source Display Only My Role‚Äôs Records on a Report Chatter Publisher Actions(Part 2): Object Custom Action Salesforce StackExchange Answer by DavidSchach for Help in writing trigger in optimised way Answer by DavidSchach for How to get Salesforce content files base URL via Apex? Answer by DavidSchach for Problem using formula Answer by DavidSchach for How do I make my visualforce page rerender?"
    },
    {
        "title": "RecordTypes",
        "fileName": "RecordTypes.html",
        "text": "RecordTypes This class is allows for easy, readable access to Record Type information from other classes.  Written by Evan Callahan, copyright(c) 2010 Groundwire Updated by David Schach, copyright(c) 2021  This program is released under the GNU General Public License. http://www.gnu.org/licenses/  This class is meant to allow for access to Record Type information from within other classes.  It is called statically, and therefore will supply the same information to all calls made from within one transaction, or set of trigger calls. This is beneficial because this info should be the same for all calls in a transaction, and by calling it statically we reduce the calls that are made, making the total transaction more efficient.  Usage recommendation: Always use DeveloperName instead of Name, as this is more likely to be hard-coded in places, while the Name is actually a label and may change(especially due to user language). Signature global inherited sharing class RecordTypes See RecordTypesTest Author Evan Callahan , Groundwire Since 2010 Author David Schach , X-Squared on Demand Since 2021 Author Nicolas Vasquez, Globant Since 2022 RecordTypes Properties Name Signature Description gd private static Map<String, Schema.SObjectType> gd Global schema describe recordTypeDevNamesById private static Map<Id, String> recordTypeDevNamesById Map of queried RecordType  DeveloperName by Id recordTypeNamesById private static Map<Id, String> recordTypeNamesById Map of queried RecordType  Name by Id recordTypesByDevName private static Map<String, Map<String, Schema.RecordTypeInfo>> recordTypesByDevName Map of Record Types by sObject name, then by DeveloperName recordTypesById private static Map<String, Map<Id, Schema.RecordTypeInfo>> recordTypesById Map of Record Types by sObject name, then by Id recordTypesByName private static Map<String, Map<String, Schema.RecordTypeInfo>> recordTypesByName Map of Record Types by sObject name, then by Name recordTypesIdMap private static Map<Id, RecordType> recordTypesIdMap Memoized map of queried RecordType  records by Id recordTypesList private static List<Schema.Recordtypeinfo> recordTypesList List of Record Type Info sObjects RecordTypes Methods clearMapsInTest() If we are running a test, clear sObject maps. We do this to avoid using @testVisible on the maps This is private and testvisible so it cannot be called in production code context fillMapsForObject(objectName) Gets record type maps for a new sObject We check in each public method if the sObject has already been described so we do not eagerly load DescribeSObjectResult getAvailableRecordTypeDevNameIdMap(sObjectName) Gives a map of all available(to the running user) RecordTypeId s by developername  for an sObject getAvailableRecordTypeNameIdMap(sObjectName) Gives a map of all available(to the running user) RecordTypeId s by name for an sObject getRecordType(objectName, recordTypeId) Given an sObject and RecordType  Id, return the RecordType  object getRecordTypeDevNameFromId(objectName, recordTypeId) Given an sObject and RecordType  Id, return the RecordType  DeveloperName This saves a query on the RecordType  object getRecordTypeDevNameFromId(recordTypeId) Generate map of all record type developer names by Id & return Record Type DeveloperName getRecordTypeDevNameFromName(objectName, recordTypeName) Given an sObject and RecordType  Name, return the RecordType  Id Note: Since RecordType.Name  is not unique, this section could give unpredicable results If possible, DO NOT USE this method - use RecordType.DeveloperName  methods instead getRecordTypeDevNameIdMap(objectName) Gives a map of all record type IDs by DeveloperName for an sObject getRecordTypeFromDevName(objectName, recordTypeDevName) Given an sObject and RecordType  DeveloperName, return the RecordType  Id getRecordTypeFromId(objectName, recordTypeId) Given an sObject and RecordType  Id, return the Record Type  object getRecordTypeFromName(objectName, recordTypeName) Given an sObject and RecordType  Name, return the RecordType  object Note: Since RecordType.Name  is not unique, this section could give unpredicable results If possible, DO NOT USE this method - use RecordType.DeveloperName  instead getRecordTypeIdFromDevName(objectName, recordTypeDevName) Given an sObject and RecordType  DeveloperName, return the RecordType  Id This should be the most-used method in this class getRecordTypeIdFromName(objectName, recordTypeName) Given an sObject and RecordType  Name, return the RecordType  Id Note: Since RecordType.Name  is not unique, this section could give unpredicable results If possible, DO NOT USE this method - use RecordType.DeveloperName  instead getRecordTypeIdSetFromDevNames(objectName, recordTypeDevNameSet) Gives a set of RecordType  Ids from an sObject and a set of RecordType  Developernames getRecordTypeNameFromDevName(objectName, recordTypeDevName) Given an sObject and RecordType  DeveloperName, return the RecordType  Name getRecordTypeNameFromId(objectName, recordTypeId) Given an sObject and RecordType  Id, return the RecordType  Name getRecordTypeNameFromId(recordTypeId) Generate map of all record type names by Id & return Record Type Name getRecordTypeNameIdMap(objectName) Gives a map of all RecordType  IDs by name for an sObject getRecordTypesForSelectList(objectName) Make a Visualforce picklist with the RecordType  Name displayed and the RecordType  Id as the value getStringRecordTypesForSelectList(objectName) Make a Visualforce picklist with the RecordType  Name displayed and the RecordType  Name as the value clearMapsInTest() If we are running a test, clear sObject maps. We do this to avoid using @testVisible on the maps This is private and testvisible so it cannot be called in production code context Signature @testVisible private static void clearMapsInTest() fillMapsForObject(objectName) Gets record type maps for a new sObject We check in each public method if the sObject has already been described so we do not eagerly load DescribeSObjectResult Signature private static void fillMapsForObject(String objectName) Parameters objectName Type: String SObject name(with __c if custom, etc) Author David Schach getAvailableRecordTypeDevNameIdMap(sObjectName) Gives a map of all available(to the running user) RecordTypeId s by developername  for an sObject Signature global static Map<String, Id> getAvailableRecordTypeDevNameIdMap(String sObjectName) Parameters sObjectName Type: String SObject name(with __c if custom, etc) Returns Map<String, Id>  Map<RecordType Name, RecordType Id> Author Nicolas Vasquez getAvailableRecordTypeNameIdMap(sObjectName) Gives a map of all available(to the running user) RecordTypeId s by name for an sObject Signature global static Map<String, Id> getAvailableRecordTypeNameIdMap(String sObjectName) Parameters sObjectName Type: String SObject name(with __c if custom, etc) Returns Map<String, Id>  Map<RecordType Name, RecordType Id> Author Nicolas Vasquez getRecordType(objectName, recordTypeId) Given an sObject and RecordType  Id, return the RecordType  object Signature global static Schema.RecordTypeInfo getRecordType(String objectName, Id recordTypeId) Parameters objectName Type: String SObject name(with __c if custom, etc) recordTypeId Type: Id RecordType Id Returns Schema.RecordTypeInfo  RecordTypeInfo object Author David Schach getRecordTypeDevNameFromId(objectName, recordTypeId) Given an sObject and RecordType  Id, return the RecordType  DeveloperName This saves a query on the RecordType  object Signature global static String getRecordTypeDevNameFromId(String objectName, Id recordTypeId) Parameters objectName Type: String SObject name(with __c if custom, etc) recordTypeId Type: Id RecordType Id Returns RecordType  DeveloperName Author David Schach getRecordTypeDevNameFromId(recordTypeId) Generate map of all record type developer names by Id & return Record Type DeveloperName Signature global static String getRecordTypeDevNameFromId(Id recordTypeId) Parameters recordTypeId Type: Id RecordTypeId Returns String  Record Type Name Author David Schach Since 2022-03-29 getRecordTypeDevNameFromName(objectName, recordTypeName) Given an sObject and RecordType  Name, return the RecordType  Id Note: Since RecordType.Name  is not unique, this section could give unpredicable results If possible, DO NOT USE this method - use RecordType.DeveloperName  methods instead Signature global static String getRecordTypeDevNameFromName(String objectName, String recordTypeName) Parameters objectName Type: String SObject name(with __c if custom, etc) recordTypeName Type: String RecordType Name(can include spaces) Returns RecordType.DeveloperName Author David Schach Example RecordTypes.getRecordTypeDevNameFromName('Account','Person Account') getRecordTypeDevNameIdMap(objectName) Gives a map of all record type IDs by DeveloperName for an sObject Signature global static Map<String, Id> getRecordTypeDevNameIdMap(String objectName) Parameters objectName Type: String SObject name(with __c if custom, etc) Returns Map<String, Id>  Map<recordTypeDevName, RecordType Id> Author David Schach getRecordTypeFromDevName(objectName, recordTypeDevName) Given an sObject and RecordType  DeveloperName, return the RecordType  Id Signature global static Schema.RecordTypeInfo getRecordTypeFromDevName(String objectName, String recordTypeDevName) Parameters objectName Type: String SObject name(with __c if custom, etc) recordTypeDevName Type: String RecordType.DeveloperName (cannot include spaces) Returns Schema.RecordTypeInfo  RecordTypeInfo object Author David Schach Example RecordTypes.getRecordTypeFromDevName('Account','Person_Account') getRecordTypeFromId(objectName, recordTypeId) Given an sObject and RecordType  Id, return the Record Type  object Signature global static Schema.RecordTypeInfo getRecordTypeFromId(String objectName, Id recordTypeId) Parameters objectName Type: String SObject name(with __c if custom, etc) recordTypeId Type: Id RecordType Id Returns Schema.RecordTypeInfo  RecordTypeInfo object Author David Schach getRecordTypeFromName(objectName, recordTypeName) Given an sObject and RecordType  Name, return the RecordType  object Note: Since RecordType.Name  is not unique, this section could give unpredicable results If possible, DO NOT USE this method - use RecordType.DeveloperName  instead Signature global static Schema.RecordTypeInfo getRecordTypeFromName(String objectName, String recordTypeName) Parameters objectName Type: String SObject name(with __c if custom, etc) recordTypeName Type: String RecordType Name(can include spaces) Returns Schema.RecordTypeInfo  RecordTypeInfo object Author David Schach getRecordTypeIdFromDevName(objectName, recordTypeDevName) Given an sObject and RecordType  DeveloperName, return the RecordType  Id This should be the most-used method in this class Signature global static Id getRecordTypeIdFromDevName(String objectName, String recordTypeDevName) Parameters objectName Type: String SObject name(with __c if custom, etc) recordTypeDevName Type: String RecordType.DeveloperName (cannot include spaces) Returns RecordType Id Author David Schach Example RecordTypes.getRecordTypeIdFromDevName('Account','Person_Account') getRecordTypeIdFromName(objectName, recordTypeName) Given an sObject and RecordType  Name, return the RecordType  Id Note: Since RecordType.Name  is not unique, this section could give unpredicable results If possible, DO NOT USE this method - use RecordType.DeveloperName  instead Signature global static Id getRecordTypeIdFromName(String objectName, String recordTypeName) Parameters objectName Type: String SObject name(with __c if custom, etc) recordTypeName Type: String RecordType Name(can include spaces) Returns RecordType Id Author David Schach Example RecordTypes.getRecordTypeIdFromName('Account','Person Account') getRecordTypeIdSetFromDevNames(objectName, recordTypeDevNameSet) Gives a set of RecordType  Ids from an sObject and a set of RecordType  Developernames Signature global static Set<Id> getRecordTypeIdSetFromDevNames(String objectName, Set<String> recordTypeDevNameSet) Parameters objectName Type: String Object of interest recordTypeDevNameSet Type: Set<String> Set of DeveloperNames Returns Set<Id>  All RecordType  IDs for a given sObject Author David Schach Example Set<String> rtNames = new Set<String> {'Person_Account', 'Customer'}; getRecordTypeIdSetFromDevNames('Account', rtNames); getRecordTypeNameFromDevName(objectName, recordTypeDevName) Given an sObject and RecordType  DeveloperName, return the RecordType  Name Signature global static String getRecordTypeNameFromDevName(String objectName, String recordTypeDevName) Parameters objectName Type: String SObject name(with __c if custom, etc) recordTypeDevName Type: String RecordType.DeveloperName (cannot include spaces) Returns RecordType Name Author David Schach Example RecordTypes.getRecordTypeNameFromDevName('Account','Person_Account') getRecordTypeNameFromId(objectName, recordTypeId) Given an sObject and RecordType  Id, return the RecordType  Name Signature global static String getRecordTypeNameFromId(String objectName, Id recordTypeId) Parameters objectName Type: String SObject name(with __c if custom, etc) recordTypeId Type: Id RecordType Id Returns RecordType Name Author David Schach getRecordTypeNameFromId(recordTypeId) Generate map of all record type names by Id & return Record Type Name Signature global static String getRecordTypeNameFromId(Id recordTypeId) Parameters recordTypeId Type: Id RecordTypeId Returns String  Record Type Name Author David Schach Since 2022-03-29 getRecordTypeNameIdMap(objectName) Gives a map of all RecordType  IDs by name for an sObject Signature global static Map<String, Id> getRecordTypeNameIdMap(String objectName) Parameters objectName Type: String SObject name(with __c if custom, etc) Returns Map<String, Id>  Map<RecordType Name, RecordType Id> Author Evan Callahan getRecordTypesForSelectList(objectName) Make a Visualforce picklist with the RecordType  Name displayed and the RecordType  Id as the value Signature global static List<SelectOption> getRecordTypesForSelectList(String objectName) Parameters objectName Type: String SObject name(with __c if custom, etc) Returns List<SelectOption>  Visualforce SelectOption list Author Evan Callahan getStringRecordTypesForSelectList(objectName) Make a Visualforce picklist with the RecordType  Name displayed and the RecordType  Name as the value Signature global static List<SelectOption> getStringRecordTypesForSelectList(String objectName) Parameters objectName Type: String SObject name(with __c if custom, etc) Returns List<SelectOption>  Visualforce SelectOption list Author Evan Callahan"
    },
    {
        "title": "RecordTypesTest",
        "fileName": "RecordTypesTest.html",
        "text": "RecordTypesTest Test class for RecordTypes.cls Signature @IsTest private class RecordTypesTest See RecordTypes Author Evan Callahan Since 2010 Author David Schach Since 2021 RecordTypesTest Methods resetTest() Clear all record type maps to enable using fewer test methods - reset within a method testAccountRecordType() Separate method for checking if we have Account record type, and then testing that testRecTypes() Test various record types and names We test nonexistent object names, nonexistent record type names, null values, and existing Account record type(if available) resetTest() Clear all record type maps to enable using fewer test methods - reset within a method Signature private static void resetTest() Author David Schach testAccountRecordType() Separate method for checking if we have Account record type, and then testing that Signature @isTest private static void testAccountRecordType() Author David Schach testRecTypes() Test various record types and names We test nonexistent object names, nonexistent record type names, null values, and existing Account record type(if available) Signature @isTest private static void testRecTypes() Author Evan Callahan"
    },
    {
        "title": "TriggerHandler",
        "fileName": "TriggerHandler.html",
        "text": "TriggerHandler Trigger Handler virtual class as base for all trigger handlers Signature public virtual class TriggerHandler See License , GitHub , TriggerHandlerTest Author Kevin OHara Since 2013 Author David Schach Since 2021 2023-02-24 add andFinally method TriggerHandler Properties Name Signature Annotations Description BYPASS_ALL_ALIAS private static final String BYPASS_ALL_ALIAS @TestVisible This is the value that will be in the returned list or set when global bypass is active bypassedHandlers private static Set<String> bypassedHandlers @TestVisible All bypassed handlers ERROR_TRIGGERCONTEXT private static final String ERROR_TRIGGERCONTEXT @TestVisible Error text - assumes English for debug logs globalBypass private static Boolean globalBypass @TestVisible true  if we bypass all triggers without checking the contents of bypassedHandlers handlerName private String handlerName The name of this handler. Set by getHandlerName() isTriggerExecuting private Boolean isTriggerExecuting @TestVisible Is this class executing in trigger context? loopCountMap private static Map<String, LoopCount> loopCountMap @TestVisible Map of handlerName  => times run()  was invoked showDebug private static Boolean showDebug @TestVisible true  if we include a debug statement for trigger entry and exit showLimits private static Boolean showLimits @TestVisible true  if we include a debug statement for limits triggerEvent private System.TriggerOperation triggerEvent @TestVisible The current triggerEvent of the trigger, overridable in tests TriggerHandler Constructors TriggerHandler() Basic constructor. Slower than the other one TriggerHandler(handlerName) Constructor with handler name to improve performance TriggerHandler() Basic constructor. Slower than the other one Signature public TriggerHandler() See TriggerHandler.TriggerHandler Example new AccountSampleTriggerHandler().run(); //(in Trigger Handler) public AccountSampleTriggerHandler) { super('AccountSampleTriggerHandler'); this.newRecords =(List<Account>) Trigger.new; this.oldRecords =(List<Account>) Trigger.old; this.newRecordsMap =(Map<Id, Account>) Trigger.newMap; this.oldRecordsMap =(Map<Id, Account>) Trigger.oldMap; } TriggerHandler(handlerName) Constructor with handler name to improve performance Signature public TriggerHandler(String handlerName) Parameters handlerName Type: String The name of the handler Author David Schach Since 2021 Example new AccountSampleTriggerHandler('AccountSampleTriggerHandler').run(); //(in Trigger Handler) public AccountSampleTriggerHandler('AccountSampleTriggerHandler') { this.newRecords =(List<Account>) Trigger.new; this.oldRecords =(List<Account>) Trigger.old; this.newRecordsMap =(Map<Id, Account>) Trigger.newMap; this.oldRecordsMap =(Map<Id, Account>) Trigger.oldMap; } TriggerHandler Methods afterDelete() Virtual method for the implementing class to override afterInsert() Virtual method for the implementing class to override afterUndelete() Virtual method for the implementing class to override afterUpdate() Virtual method for the implementing class to override andFinally() andFinally  is called in every context, regardless of Trigger context Credit to James Simone for this idea beforeDelete() Virtual method for the implementing class to override beforeInsert() Virtual method for the implementing class to override beforeUpdate() Virtual method for the implementing class to override bypass(handlerName) Bypass by string bypass(handlerType) Bypass by type/class. This is probably best for avoiding typos. bypass(handlerNames) Bypass by list, e.g. TriggerHandler.bypass(listOfHandlerStrings) bypassAll() Bypass all handlers(clear bypassedHandlers to prevent confusion) bypassList() Return a list of the bypassed handlers Though both Set and List allow contains(value), we include both methods for convenience bypassSet() Return a Set of the bypassed handlers Though both Set and List allow contains(value), we include both methods for convenience clearAllBypasses() Clear all bypasses - by clearing the global bypass and by clearing the list of bypassed handlers clearBypass(handlerName) Bypass a specific handler by name clearBypass(handlerType) Bypass a specific handler by type clearBypass(handlerNames) Bypass a list of handlers clearBypassList() Clear the entire bypass list, but keep the global bypass flag intact This is useful for resetting the list of handlers to bypass while maintaining global bypassing clearGlobalBypass() Clear only the global bypass flag, leaving the list of bypassed handlers intact This is useful for keeping a base set of bypassed handlers intact for an entire operation clearMaxLoopCount() Removes the limit for the number of times we allow this class to run getHandlerName() Get the name of the current handler. This can be set by using the constructor with the string parameter to improve performance getLoopCount(handlerName) return the current loop count incrementCheckLoopCount() Increment the loop count and check if we exceeded the max loop count. Silently exit if we have exceeded it.(Log to System.debug) isBypassed(handlerName) A handler is considered bypassed if it was bypassed, or all handlers have been bypassed isBypassed(handlerType) A handler is considered bypassed if it was bypassed, or all handlers have been bypassed run() Main method that will be called during execution See the sample trigger for the best way to set up your handler setBypass(handlerName, desiredValue) Set bypass status to a specific value. Eliminates the need to know the current bypass status setMaxLoopCount(max) Limit the number of times this handler can be run before it fails silently setTriggerContext() Base method called by constructor to set the current context setTriggerContext(opType, testMode) Set the current trigger context based on the System.TriggerOperation If we are not in a trigger context, then we set isTriggerExecuting to false showDebug() Called in the trigger to force the class to debug trigger entry and exit with context. showDebug(enabled) Called in the trigger to force the class to debug trigger entry and exit with context. Set to true to show entry and exit. showLimits() Called before the trigger to force the class to debug query limits when it runs showLimits(enabled) Called before the trigger to enable the class to debug(or not) query limits when it runs. Set to true to show limits. validateRun() Make sure this trigger should continue to run Returning false  causes trigger handler to exit afterDelete() Virtual method for the implementing class to override Signature @TestVisible protected virtual void afterDelete() afterInsert() Virtual method for the implementing class to override Signature @TestVisible protected virtual void afterInsert() afterUndelete() Virtual method for the implementing class to override Signature @TestVisible protected virtual void afterUndelete() afterUpdate() Virtual method for the implementing class to override Signature @TestVisible protected virtual void afterUpdate() andFinally() andFinally  is called in every context, regardless of Trigger context Credit to James Simone for this idea Signature @TestVisible protected virtual void andFinally() See The Joys of Apex Author James Simone Since 2022 beforeDelete() Virtual method for the implementing class to override Signature @TestVisible protected virtual void beforeDelete() beforeInsert() Virtual method for the implementing class to override Signature @TestVisible protected virtual void beforeInsert() beforeUpdate() Virtual method for the implementing class to override Signature @TestVisible protected virtual void beforeUpdate() bypass(handlerName) Bypass by string Signature public static void bypass(String handlerName) Parameters handlerName Type: String Name of the handler to be bypassed Example TriggerHandler.bypass('AccountSampleTriggerHandler'); bypass(handlerType) Bypass by type/class. This is probably best for avoiding typos. Signature public static void bypass(Type handlerType) Parameters handlerType Type: Type The Class to be bypassed. Must end with \".class\" Author vr8hub Example TriggerHandler.bypass(AccountTriggerHandler.class); bypass(handlerNames) Bypass by list, e.g. TriggerHandler.bypass(listOfHandlerStrings) Signature public static void bypass(List<String> handlerNames) Parameters handlerNames Type: List<String> List of handlernames bypassAll() Bypass all handlers(clear bypassedHandlers to prevent confusion) Signature public static void bypassAll() Example TriggerHandler.bypassAll(); bypassList() Return a list of the bypassed handlers Though both Set and List allow contains(value), we include both methods for convenience Signature public static List<String> bypassList() Returns List<String>  List of bypassed handlers Example TriggerHandler.bypassList(); bypassSet() Return a Set of the bypassed handlers Though both Set and List allow contains(value), we include both methods for convenience Signature public static Set<String> bypassSet() Returns Set<String>  Set of bypassed handlers Author David Schach Since 2022 Example if(TriggerHandler.bypassSet().contains('AccountSampleTriggerHandler'){ // do something } clearAllBypasses() Clear all bypasses - by clearing the global bypass and by clearing the list of bypassed handlers Signature public static void clearAllBypasses() Example TriggerHandler.clearAllBypasses(); clearBypass(handlerName) Bypass a specific handler by name Signature public static void clearBypass(String handlerName) Parameters handlerName Type: String The class name to be bypassed Author vr8hub Example TriggerHandler.clearBypass('AccountSampleTriggerHandler'); clearBypass(handlerType) Bypass a specific handler by type Signature public static void clearBypass(Type handlerType) Parameters handlerType Type: Type The class to be bypassed. Must end with \".class\" Example TriggerHandler.clearBypass(AccountSampleTriggerHandler.class); clearBypass(handlerNames) Bypass a list of handlers Signature public static void clearBypass(List<String> handlerNames) Parameters handlerNames Type: List<String> List of Strings of handlers to bypass Example List<String> classList = ['AccountTriggerHandler','ContactTriggerHandler']; TriggerHandler.clearBypass(classList); clearBypassList() Clear the entire bypass list, but keep the global bypass flag intact This is useful for resetting the list of handlers to bypass while maintaining global bypassing Signature public static void clearBypassList() Example TriggerHandler.clearBypassList(); clearGlobalBypass() Clear only the global bypass flag, leaving the list of bypassed handlers intact This is useful for keeping a base set of bypassed handlers intact for an entire operation Signature public static void clearGlobalBypass() Example TriggerHandler.clearGlobalBypass(); clearMaxLoopCount() Removes the limit for the number of times we allow this class to run Signature public void clearMaxLoopCount() getHandlerName() Get the name of the current handler. This can be set by using the constructor with the string parameter to improve performance Signature @TestVisible private String getHandlerName() Returns String  Name of the current handler See TriggerHandler.handlerName getLoopCount(handlerName) return the current loop count Signature public static Integer getLoopCount(String handlerName) Parameters handlerName Type: String The handler class to check for the current loop count Returns Integer  How many times has this handler run? incrementCheckLoopCount() Increment the loop count and check if we exceeded the max loop count. Silently exit if we have exceeded it.(Log to System.debug) Signature private Boolean incrementCheckLoopCount() Returns Boolean  Should the trigger continue execution? Authors David Schach , fbouzeraa isBypassed(handlerName) A handler is considered bypassed if it was bypassed, or all handlers have been bypassed Signature public static Boolean isBypassed(String handlerName) Parameters handlerName Type: String The class name of the handler we are checking is bypassed Returns Boolean  Is this handler bypassed? Example TriggerHandler.isBypassed('AccountTriggerHandler'); isBypassed(handlerType) A handler is considered bypassed if it was bypassed, or all handlers have been bypassed Signature public static Boolean isBypassed(Type handlerType) Parameters handlerType Type: Type The handler class we are checking is bypassed Returns Boolean  Is this handler bypassed? Since 2021 Example TriggerHandler.isBypassed(AccountTriggerHandler.class); run() Main method that will be called during execution See the sample trigger for the best way to set up your handler Signature public void run() Authors Kevin OHara , David Schach Example new AccountSampleTriggerHandler().run(); setBypass(handlerName, desiredValue) Set bypass status to a specific value. Eliminates the need to know the current bypass status Signature public static void setBypass(String handlerName, Boolean desiredValue) Parameters handlerName Type: String The name of the TriggerHandler class desiredValue Type: Boolean true  to bypass, and false  to run the handler/clear the bypass Since 2021 Author David Schach Example TriggerHandler.setBypass('AccountTriggerHandler', false); -or- Boolean isBypassed = TriggerHandler.isBypassed('AccountTriggerHandler'); TriggerHandler.bypass('AccountTriggerHandler'); // do something here TriggerHandler.setBypass('AccountTriggerHandler', isBypassed); setMaxLoopCount(max) Limit the number of times this handler can be run before it fails silently Signature public void setMaxLoopCount(Integer max) Parameters max Type: Integer Naximum number of times Author David Schach Example TriggerHandler.setMaxLoopCount(5); setTriggerContext() Base method called by constructor to set the current context Signature @TestVisible private void setTriggerContext() setTriggerContext(opType, testMode) Set the current trigger context based on the System.TriggerOperation If we are not in a trigger context, then we set isTriggerExecuting to false Signature @TestVisible private void setTriggerContext(System.TriggerOperation opType, Boolean testMode) Parameters opType Type: System.TriggerOperation The operation type - set automatically by the system testMode Type: Boolean Only used in test methods to force certain contexts See TriggerHandler.isTriggerExecuting showDebug() Called in the trigger to force the class to debug trigger entry and exit with context. Signature public static void showDebug() See TriggerHandler.showLimits Author David Schach Since 2021 Example TriggerHandler.showDebug(); new AccountSampleTriggerHandler.run(); -or- AccountSampleTriggerHandler.showDebug(); showDebug(enabled) Called in the trigger to force the class to debug trigger entry and exit with context. Set to true to show entry and exit. Signature public static void showDebug(Boolean enabled) Parameters enabled Type: Boolean true to enable; false to disable See TriggerHandler.showDebug Author David Schach Since 2021 showLimits() Called before the trigger to force the class to debug query limits when it runs Signature public static void showLimits() See TriggerHandler.showLimits Example TriggerHandler.showLimits(); new AccountSampleTriggerHandler.run(); -or- AccountSampleTriggerHandler.showLimits(); showLimits(enabled) Called before the trigger to enable the class to debug(or not) query limits when it runs. Set to true to show limits. Signature public static void showLimits(Boolean enabled) Parameters enabled Type: Boolean true to enable; false to disable See TriggerHandler.showLimits validateRun() Make sure this trigger should continue to run Returning false  causes trigger handler to exit Signature @TestVisible private Boolean validateRun() Returns Boolean  Is the run valid? Exceptions TriggerHandlerException See TriggerHandler.TriggerHandlerException TriggerHandler.LoopCount Inner class for managing the loop count per handler Signature @TestVisible private class LoopCount TriggerHandler.LoopCount Properties Name Signature Description count private Integer count Number of times this handler has been run max private Integer max Maximum number of times this handler should be run TriggerHandler.LoopCount Constructors LoopCount() Standard constructor Default max to 5 Default count to 0 LoopCount(max) Constructor with specified max loops LoopCount() Standard constructor Default max to 5 Default count to 0 Signature public LoopCount() LoopCount(max) Constructor with specified max loops Signature public LoopCount(Integer max) Parameters max Type: Integer Max number of loops allowed TriggerHandler.LoopCount Methods exceeded() Determines if we're about to exceed the loop count. getCount() Returns the current loop count. getMax() Returns the max loop count. increment() Increment the internal counter returning the results of this.exceeded(). setMax(max) Sets the max loop count exceeded() Determines if we're about to exceed the loop count. Signature public Boolean exceeded() Returns Boolean  True if less than 0 or more than max. getCount() Returns the current loop count. Signature public Integer getCount() Returns Integer  Current loop count. getMax() Returns the max loop count. Signature public Integer getMax() Returns Integer  Max loop count. increment() Increment the internal counter returning the results of this.exceeded(). Signature public Boolean increment() Returns Boolean  true if count will exceed max count or is less than 0. setMax(max) Sets the max loop count Signature public void setMax(Integer max) Parameters max Type: Integer The integer to set max to. TriggerHandler.TriggerHandlerException Exception class Signature public class TriggerHandlerException extends Exception"
    },
    {
        "title": "TriggerHandlerTest",
        "fileName": "TriggerHandlerTest.html",
        "text": "TriggerHandlerTest Test class for base TriggerHandler class Signature @isTest private class TriggerHandlerTest See GitHub , TriggerHandler Author Kevin OHara Since 2013 Author David Schach Since 2021 Update, add new methods 2023-02-08 Update assert methods to Assert class TriggerHandlerTest Properties Name Signature handler private static TriggerHandlerTest.TestHandler handler lastMethodCalled private static String lastMethodCalled TriggerHandlerTest Methods afterDeleteMode() afterInsertMode() afterUndeleteMode() afterUpdateMode() assertTestHandlerName() Ensure that the current handler name is as expected beforeDeleteMode() beforeInsertMode() beforeUpdateMode() resetTest() testAfterDelete() testAfterInsert() testAfterUndelete() testAfterUpdate() testBeforeDelete() testBeforeInsert() testBeforeInsertWithLimits() Test and show limits and debug testBeforeUpdate() testBypassAPI() test bypass api testBypassByType() Test bypass by Type testConstructorWithParameter() testConstructorWithParametersAndBypass() testLoopCount() instance method tests testLoopCountClass() testNonTriggerContext() testOutsideTrigger() call from outside trigger testVirtualMethods() test virtual methods afterDeleteMode() Signature private static void afterDeleteMode() afterInsertMode() Signature private static void afterInsertMode() afterUndeleteMode() Signature private static void afterUndeleteMode() afterUpdateMode() Signature private static void afterUpdateMode() assertTestHandlerName() Ensure that the current handler name is as expected Signature private static void assertTestHandlerName() beforeDeleteMode() Signature private static void beforeDeleteMode() beforeInsertMode() Signature private static void beforeInsertMode() beforeUpdateMode() Signature private static void beforeUpdateMode() resetTest() Signature private static void resetTest() testAfterDelete() Signature @isTest private static void testAfterDelete() testAfterInsert() Signature @isTest private static void testAfterInsert() testAfterUndelete() Signature @isTest private static void testAfterUndelete() testAfterUpdate() Signature @isTest private static void testAfterUpdate() testBeforeDelete() Signature @isTest private static void testBeforeDelete() testBeforeInsert() Signature @isTest private static void testBeforeInsert() testBeforeInsertWithLimits() Test and show limits and debug Signature @isTest private static void testBeforeInsertWithLimits() testBeforeUpdate() Signature @isTest private static void testBeforeUpdate() testBypassAPI() test bypass api Signature @isTest private static void testBypassAPI() testBypassByType() Test bypass by Type Signature @IsTest static void testBypassByType() testConstructorWithParameter() Signature @isTest private static void testConstructorWithParameter() testConstructorWithParametersAndBypass() Signature @isTest private static void testConstructorWithParametersAndBypass() testLoopCount() instance method tests Signature @isTest private static void testLoopCount() testLoopCountClass() Signature @isTest private static void testLoopCountClass() testNonTriggerContext() Signature @isTest private static void testNonTriggerContext() testOutsideTrigger() call from outside trigger Signature @isTest private static void testOutsideTrigger() testVirtualMethods() test virtual methods Signature @isTest private static void testVirtualMethods() TriggerHandlerTest.TestHandler test implementation of the TriggerHandler Signature private class TestHandler extends TriggerHandler TriggerHandlerTest.TestHandler Constructors TestHandler() Invoke constructor TestHandler(handlerName) Override the trigger handler constructor that takes the handler name as a parameter TestHandler() Invoke constructor Signature public TestHandler() TestHandler(handlerName) Override the trigger handler constructor that takes the handler name as a parameter Signature public TestHandler(String handlerName) Parameters handlerName Type: String The handler name to instantiate TriggerHandlerTest.TestHandler Methods afterDelete() afterInsert() afterUndelete() afterUpdate() beforeDelete() beforeInsert() beforeUpdate() afterDelete() Signature public override void afterDelete() afterInsert() Signature public override void afterInsert() afterUndelete() Signature public override void afterUndelete() afterUpdate() Signature public override void afterUpdate() beforeDelete() Signature public override void beforeDelete() beforeInsert() Signature public override void beforeInsert() beforeUpdate() Signature public override void beforeUpdate()"
    }
];
